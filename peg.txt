start
  = program

space = " "
char = [a-z]
digit = [0-9]
integer = first:[1-9] rest:digit* {
  return parseInt(first + rest.join(""), 10);
}
float = i:integer "." dec:digit+ {
  return parseFloat(i + "." + dec.join(""), 10);
}

lineNum = integer

number
  = f:float { return {type: "value", value: f }}
  / i:integer { return {type: "value", value: i }}

string = "\"" s:char* "\""
 { return {type: "value", value: s.join("") }; }

value = number / string

keyword = a:char b:char rest:char*
 { return a+b+rest.join(""); }

variable = char

assignment =
 "let " v:variable space* "=" space* exp:expr {
   return { type:"assignment", variable: v, value: exp };
 }

testType = "=" / "<>" / "<" / ">"
test = v:variable space* t:testType space* exp:expr {
  return { type:t, variable: v, value: exp }
}

sumType = "+" / "-" / "*" / "\/"
sum = v:variable space* s:sumType space* exp:expr {
  return {type: "sum", variable: v, exp: exp}; 
}

argument = space* e:expr space* ","* { return e; }

func = k:keyword a:argument*
{return {type:"func", name: k, args: a}}

iftest = "if " e:combination " then " e2:expr {
  return { "type": "if", ifExpr: e, thenExpr: e2 };
}

expr
 = value
 / assignment
 / test
 / sum
 / iftest
 / func

combinator = "and" / "or"
combination
 = e1:expr space c:combinator space e2:combination {
    return {
      type: "combination",
      comb: c,
      exp1: e1,
      exp2: e2
    }}
 / expr

line =
  line: lineNum space ex:combination "\n" {
    return {line: line, exp:ex};
  }

program = line+

// http://nathansuniversity.com/pegs.html
// http://pegjs.org/online
/*
10 cls
20 let a=1
30 let b=3.14159
40 "asdf"
50 print "hello"
60 goto 10
70 let a=sin 30
80 if a=1 and b<>2 then goto 30
90 poke v+10, 30
*/
